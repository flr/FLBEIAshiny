{
    "collab_server" : "",
    "contents" : "\nserver <- function(input, output, session){\n\n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation STOCK \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n  \n  PlotHeight_stk <- reactive({\n    \n    nids <- length(input$stockS)\n    \n    return(300*nids)})\n  \n  observe ({\n    dataS<-reactive({\n      req(input$stockS)\n      bio[bio$year>=input$rangeS[1] & bio$year<=input$rangeS[2] \n          & bio$stock%in%input$stockS\n          & bio$indicator%in%input$indicatorS\n          & bio$scenario%in%input$scenarioS,]\n    })\n    \n    \n    plotStock <- function(){\n      \n      p <-ggplot(dataS(), aes(x=year, y=q50, color=scenario))+\n        geom_line(aes(color=scenario), lwd = 1) +\n        ylab(\"\")+xlab(\"Year\")+\n        theme(strip.text=element_text(size=16),\n              legend.title=element_text(size=14),\n              axis.title= element_text(size =14))\n      \n      # Confidence intervals\n      if (input$fitCIS == TRUE){\n        p <- p + geom_ribbon(aes(x=year, ymin=q05, ymax=q95,fill = scenario), alpha=0.3)\n      }\n      \n      if(input$fitS == FALSE){\n          p <- p + facet_grid(stock~indicator)\n      }\n      else{\n          p <- p + facet_wrap(stock~indicator, scale = 'free_y')\n      }\n      \n      }\n    \n    \n    output$plotS<-renderPlot({\n      print(plotStock())\n    }, height = PlotHeight_stk)\n    \n    \n    # Code to download the plot\n    getW <- function(){\n      return(input$fileWS)\n    }\n    \n    getH <- function(){\n      return(input$fileHS)\n    }\n    \n    getS <- function(){\n      return(input$fileScS)\n    }\n    \n    # Download the plot\n    output$down <- downloadHandler(\n      filename =  function() {\n        paste(input$filenmS, input$fileTypeS, sep=\".\")\n      },\n      # content is a function with argument file. content writes the plot to the device\n      content = function(file) {\n        ggsave(file, plotStock(), width = getW(), height = getH(), units = 'cm', scale = getS())\n        } \n    )\n    \n  })# end of the observe stock \n  \n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation STOCK_kobe plot \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n observe({ dataK<-reactive({\n    \n    req(input$stockK)\n    \n\n    \n    data[data$year>=input$rangeK[1] & data$year<=input$rangeK[2] \n        & data$unit%in%input$stockK\n        & data$scenario%in%input$scenarioK,]\n  })\n\n  \n  plotKobe <- function(){\n      kobePhase(dataK())+\n      geom_point(aes(stock,harvest, group=unit, col=scenario))+\n      geom_text(data=dataK(),aes(stock,harvest, col=scenario, group=unit, label=year))+\n      geom_path(aes(stock, harvest, group=unit, col=scenario), data=dataK())+\n      facet_wrap(~unit)+\n      theme(text=element_text(size=16),\n            title=element_text(size=16),\n            strip.text=element_text(size=16))\n  }\n  \n  output$plotK <- renderPlot({\n\n    plotKobe()\n  })\n  \n  # Code to download the plot\n  getWSK <- function(){\n    return(input$fileWSK)\n  }\n  \n  getHSK <- function(){\n    return(input$fileHSK)\n  }\n  \n  getSSK <- function(){\n    return(input$fileScSK)\n  }\n  \n  # Download the plot\n  output$downSK <- downloadHandler(\n    filename =  function() {\n      paste(input$filenmSK, input$fileTypeSK, sep=\".\")\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      ggsave(file, plotKobe(), width = getWSK(), height = getHSK(), units = 'cm', scale = getSSK())\n    } \n  )\n  \n })\n  \n  \n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation STOCK_Biological risk\n#-----------------------------------------------------------------------------------------------------------------------  \n  \n  dataR<-reactive({\n    req(input$stockR)\n    risk[risk$year>=input$rangeR[1] & risk$year<=input$rangeR[2] \n         & risk$unit%in%input$stockR\n         & risk$scenario%in%input$scenarioR\n         & risk$indicator%in%input$brpR,]\n  })\n  \n  \n  plotSR <- function(){\n    ggplot(dataR(), aes(x=year, y=value, group=scenario, color=scenario))+\n      geom_line(aes(color=scenario), lwd = 1.5)+\n      facet_grid(indicator~unit)+\n      theme_bw()+\n      theme(text=element_text(size=16),\n            title=element_text(size=16),\n            strip.text=element_text(size=16),\n            axis.text.x = element_text(angle = 90, hjust = 1))+\n      xlab(\"Year\")+ ylab(\"Probability\")\n  }\n  \n  output$plotR<-renderPlot({\n    plotSR()\n  })\n  \n  \n  # Code to download the plot\n  getWSR <- function(){\n    return(input$fileWSR)\n  }\n  \n  getHSR <- function(){\n    return(input$fileHSR)\n  }\n  \n  getSSR <- function(){\n    return(input$fileScSR)\n  }\n  \n  # Download the plot\n  output$downSR <- downloadHandler(\n    filename =  function() {\n      paste(input$filenmSR, input$fileTypeSR, sep=\".\")\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      ggsave(file, plotSR(), width = getWSR(), height = getHSR(), units = 'cm', scale = getSSR())\n    } \n  )\n  \n  \n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation FLEET\n#-----------------------------------------------------------------------------------------------------------------------  \n  \n  #---------------------------------------------------\n  # PAGE_simulation FLEET_TIMES SERIES\n  #---------------------------------------------------\n  PlotHeight_flt <- reactive({\n    nids <- length(input$fleetF)\n    return(300*nids)})\n  \n  observe ({\n    dataF<-reactive({\n      req(input$fleetF)\n      flt[flt$year>=input$rangeF[1] & flt$year<=input$rangeF[2] \n          & flt$fleet%in%input$fleetF\n          & flt$scenario%in%input$scenarioF\n          & flt$indicator%in%input$indicatorF,]\n    })\n    \n    \n    plotFleet <- function(){\n      \n      p <- ggplotF <-ggplot(dataF(), aes(x=as.numeric(year), y=q50, color=scenario))+\n                  geom_line(aes(color=scenario),lwd=1)+\n                  ylab(\"\")+\n                  xlab(\"Year\")+\n                  theme(strip.text=element_text(size=16),\n                    legend.title=element_text(size=14),\n                    axis.title=element_text(size=14))\n      \n      # With Conf Int.\n      if (input$fitCIF == TRUE){\n        p <- p + geom_ribbon(aes(x=as.numeric(year), ymin=q05, ymax=q95,fill = scenario), alpha=0.3) \n      }\n      \n      if(input$fitF==TRUE){\n        p <- p + facet_wrap(fleet ~ indicator, ncol=length(input$fleetF), scales=\"free_y\")\n      }\n      else{\n        p <- p + facet_grid(fleet ~ indicator)  \n      }\n      \n      return(p)\n      }\n    \n   \n    output$plotF <-renderPlot({\n      print(plotFleet())\n    }, height = PlotHeight_flt)\n    \n    # Code to download the plot\n    getFW <- function(){\n      return(input$fileWF)\n    }\n    \n    getFH <- function(){\n      return(input$fileHF)\n    }\n    \n    getFS <- function(){\n      return(input$fileScF)\n    }\n    \n    # Download the plot\n    output$downF <- downloadHandler(\n      filename =  function() {\n        paste(input$filenmF, input$fileTypeF, sep=\".\")\n      },\n      # content is a function with argument file. content writes the plot to the device\n      content = function(file) {\n        ggsave(file, plotFleet(), width = getFW(), height = getFH(), units = 'cm', scale = getFS())\n      } \n    )\n    \n    })#end of the observer\n  \n\n    #-------------------------------\n    # PAGE_simulation FLEET_NPV\n    #-------------------------------\n  \n    # print('caracola02')   \n    dataN<-reactive({\n        req(input$fleetN)\n        npv2[npv2$fleet%in%input$fleetN & npv2$scenario%in%input$scenarioN,]})\n\n    plotNPV <- function(){\n      ggplot(dataN(), aes(x=fleet, y=q50, group=scenario))+\n        geom_point(aes(color=fleet),cex=2)+\n        geom_errorbar(aes(ymin=q05, ymax=q95, color=fleet), lwd=1)+\n        theme_bw()+\n        facet_wrap(~scenario)+\n        theme(text=element_text(size=16),\n              title=element_text(size=16),\n              strip.text=element_text(size=16),\n              axis.text.x=element_blank(),\n              axis.ticks.x=element_blank())+\n        ylab(\"NPV\")\n    }\n    \n    output$plotFN<-renderPlot({\n      plotNPV()\n    })\n      \n      # Code to download the plot\n      getFNW <- function(){\n        return(input$fileWFN)\n      }\n      \n      getFNH <- function(){\n        return(input$fileHFN)\n      }\n      \n      getFNS <- function(){\n        return(input$fileScFN)\n      }\n      \n      # Download the plot\n      output$downFN <- downloadHandler(\n        filename =  function() {\n          paste(input$filenmFN, input$fileTypeFN, sep=\".\")\n        },\n        # content is a function with argument file. content writes the plot to the device\n        content = function(file) {\n          ggsave(file, plotNPV(), width = getFNW(), height = getFNH(), units = 'cm', scale = getFNS())\n        } \n      )\n    \n  \n  \n  \n    #-------------------------------\n    # PAGE_simulation FLEET_Risk\n    #-------------------------------\n  \n    dataE<-reactive({\n          req(input$fleetE)\n          risk[risk$unit%in%input$fleetE & risk$scenario%in%input$scenarioE & risk$indicator==\"pPrflim\",]})\n\n      \n    plotFLRisk <- function(){\n        ggplot(dataE(), aes(x=as.numeric(year), y=value, color=scenario))+\n        geom_line(aes(color=scenario),lwd=1)+\n        facet_wrap(~unit, scales=\"free\")+\n        ylab(\"\")+ xlab(\"Year\")+\n        theme(strip.text=element_text(size=16),\n              legend.title=element_text(size=14),\n              axis.title= element_text(size =14))\n      }\n      \n    output$plotFR <-renderPlot({\n            plotFLRisk()\n    })\n    \n    \n    # Code to download the plot\n    getFRW <- function(){\n      return(input$fileWFR)\n    }\n    \n    getFRH <- function(){\n      return(input$fileHFR)\n    }\n    \n    getFRS <- function(){\n      return(input$fileScFR)\n    }\n    \n    # Download the plot\n    output$downFR <- downloadHandler(\n      filename =  function() {\n        paste(input$filenmFR, input$fileTypeFR, sep=\".\")\n      },\n      # content is a function with argument file. content writes the plot to the device\n      content = function(file) {\n        ggsave(file, plotFLRisk(), width = getFRW(), height = getFRH(), units = 'cm', scale = getFRS())\n      } \n    )\n\n  \n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation METIER_Times series \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n  PlotHeight_mt <- reactive({\n    \n    nids <- length(input$metierM)\n    \n    return(300*nids)})\n  \n  \n  observe ({\n    \n    updateSelectInput(session, inputId =  \"metierM\", \n                      # label = h4(\"Stock\"), \n                      choices =   unique(mt[mt$fleet %in% input$fleetM, 'metier']), \n                      selected =  unique(mt[mt$fleet %in% input$fleetM, 'metier'])[1])#, server = TRUE)#,\n  }) \n  \n  observe ({\n    dataM<-reactive({\n      req(input$metierM)\n      mt[mt$year>=input$rangeM[1] & mt$year<=input$rangeM[2] & mt$fleet%in%input$fleetM & mt$metier%in%input$metierM\n                                  & mt$scenario%in%input$scenarioM & mt$indicator%in%input$indicatorM,]\n    })\n    \n    plotMetier <- function(){\n        p <-ggplot(dataM(), aes(x=as.numeric(year), y=q50, color=scenario))+\n                  geom_line(aes(color=scenario),lwd=1)+\n                  ylab(\"\")+\n                  xlab(\"Year\")+\n                  theme(strip.text=element_text(size=16),\n                  legend.title=element_text(size=14),\n                  axis.title=element_text(size=14))\n      \n        if(input$fitCIM == TRUE)\n            p <- p + geom_ribbon(aes(x=as.numeric(year), ymin=q05, ymax=q95,fill = scenario), alpha=0.3)\n        \n        if(input$fitM==TRUE){\n          p <- p + facet_wrap(metier ~ indicator, scale = 'free_y')\n        }\n        else{\n          p <- p + facet_grid(metier ~ indicator)\n        }\n        return(p)}\n    \n    \n    output$plotMM<-renderPlot({\n      print(plotMetier())}, height = PlotHeight_mt)\n    \n    # Code to download the plot\n    getMW <- function(){\n      return(input$fileWM)\n    }\n    \n    getMH <- function(){\n      return(input$fileHM)\n    }\n    \n    getMS <- function(){\n      return(input$fileScM)\n    }\n    \n    # Download the plot\n    output$downM <- downloadHandler(\n      filename =  function() {\n        paste(input$filenmM, input$fileTypeM, sep=\".\")\n      },\n      # content is a function with argument file. content writes the plot to the device\n      content = function(file) {\n        ggsave(file, plotMetier(), width = getMW(), height = getMH(), units = 'cm', scale = getMS())\n      } \n    )\n    \n  })#end of the observer\n  \n\n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation FLEET BY_Times series \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n  # print('caracola06')      \n  PlotHeight_Fby <- reactive({\n    \n    nids <- length(input$fleetFby)*length(input$stockFby)\n    \n    return(300*nids)})\n  \n  observe ({\n    \n    updateSelectInput(session, inputId  = \"stockFby\", \n                               choices  = unique(fltStk[fltStk$fleet %in% input$fleetFby, 'stock']), \n                               selected = unique(fltStk[fltStk$fleet %in% input$fleetFby, 'stock'])[1])#, server = TRUE)#,\n    })    \n\n  observe ({\n      dataFby<-reactive({\n        req(input$fleetFby)\n          fltStk[fltStk$year>=input$rangeFby[1]         & fltStk$year<=input$rangeFby[2]\n               & fltStk$stock%in%input$stockFby         & fltStk$fleet%in%input$fleetFby\n               & fltStk$indicator%in%input$indicatorFby & fltStk$scenario%in%input$scenarioFby,]\n      })\n      \n   #   browser()\n\n      # print('caracola061')  \n\n      \n      plotFleetby <- function(){\n            \n        p <- ggplotFby<-ggplot(dataFby(), aes(x=as.numeric(year), y=q50, color=scenario))+\n                geom_line(aes(color=scenario),lwd=1)+\n                ylab(\"\")+\n                xlab(\"Year\")+\n                theme(strip.text=element_text(size=16),\n                legend.title=element_text(size=14),\n                axis.title=element_text(size=14))\n        \n        if(input$fitCIFby == TRUE){\n          p <- p + geom_ribbon(aes(x=as.numeric(year), ymin=q05, ymax=q95,fill = scenario), alpha=0.3)\n        }\n        \n        if(input$fitFby == FALSE){\n          p <- p + facet_grid(fleet*stock ~ indicator)\n        }\n        else{\n          p <- p + facet_wrap(fleet*stock ~ indicator, ncol=length(input$stockFby), scales=\"free_y\")\n        }\n        return(p)}\n      \n      \n      output$plotFby <-renderPlot({\n        print(plotFleetby())\n      }, height = PlotHeight_Fby)\n      \n      # Code to download the plot\n      getFbyW <- function(){\n        return(input$fileWFby)\n      }\n      \n      getFbyH <- function(){\n        return(input$fileHFby)\n      }\n      \n      getFbyS <- function(){\n        return(input$fileScFby)\n      }\n      \n      # Download the plot\n      output$downFby <- downloadHandler(\n        filename =  function() {\n          paste(input$filenmFby, input$fileTypeFby, sep=\".\")\n        },\n        # content is a function with argument file. content writes the plot to the device\n        content = function(file) {\n          ggsave(file, plotFleetby(), width = getFbyW(), height = getFbyH(), units = 'cm', scale = getFbyS())\n        } \n      )\n})\n    \n    \n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation METIER BY_Times series \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n  PlotHeight_Mby <- reactive({\n    \n    nids <- length(input$fleetMby)*length(input$stockMby)\n    \n    return(300*nids)})\n  \n  \n  observe ({\n    \n    updateSelectInput(session, inputId =  \"metierMby\", \n                      # label = h4(\"Stock\"), \n                      choices =   unique(mtStk[mtStk$fleet %in% input$fleetMby, 'metier']), \n                      selected =  unique(mtStk[mtStk$fleet %in% input$fleetMby, 'metier'])[1])#, server = TRUE)#,\n  })\n  \n  observe ({\n    updateSelectInput(session, inputId =  \"stockMby\", \n                      # label = h4(\"Stock\"), \n                      choices =   unique(mtStk[mtStk$metier %in% input$metierMby & mtStk$fleet %in% input$fleetMby, 'stock']), \n                      selected =  unique(mtStk[mtStk$metier %in% input$metierMby & mtStk$fleet %in% input$fleetMby, 'stock'])[1])\n  }) \n  \n  \n  observe ({\n      dataMby<-reactive({\n      \n      mtStk[mtStk$year>=input$rangeMby[1]           & mtStk$year<=input$rangeMby[2] & mtStk$stock %in% input$stockMby\n          & mtStk$metier %in% input$metierMby       & mtStk$fleet %in% input$fleetMby\n          & mtStk$indicator %in% input$indicatorMby & mtStk$scenario %in% input$scenarioMby,]\n    })\n    \n \n    plotMetierby <- function(){\n        p <- ggplot(dataMby(), aes(x=as.numeric(year), y=q50, color=scenario))+\n                geom_line(aes(color=scenario),lwd=1)+\n                ylab(\"\")+\n                xlab(\"Year\")+\n                theme(strip.text=element_text(size=16),\n                legend.title=element_text(size=14),\n                axis.title=element_text(size=14))\n\n        if (input$fitCIMby == TRUE){\n          p <- p + geom_ribbon(aes(x=as.numeric(year), ymin=q05, ymax=q95,fill = scenario), alpha=0.3)\n        } \n        if(input$fitMby==TRUE){\n          p <- p + facet_wrap(metier*stock ~ indicator, ncol=length(input$metierMby), scales=\"free_y\")\n        }\n        else{\n          p <- p + facet_grid(metier*stock ~ indicator)\n        }\n        return(p)\n    }\n    \n    output$plotMby <- renderPlot({\n             print(plotMetierby())\n      }, height = PlotHeight_Mby)\n         \n    \n    # Code to download the plot\n    getMbyW <- function(){\n      return(input$fileWMby)\n    }\n    \n    getMbyH <- function(){\n      return(input$fileHMby)\n    }\n    \n    getMbyS <- function(){\n      return(input$fileScMby)\n    }\n    \n    # Download the plot\n    output$downMby <- downloadHandler(\n      filename =  function() {\n        paste(input$filenmMby, input$fileTypeMby, sep=\".\")\n      },\n      # content is a function with argument file. content writes the plot to the device\n      content = function(file) {\n        ggsave(file, plotMetierby(), width = getMbyW(), height = getMbyH(), units = 'cm', scale = getMbyS())\n      } \n    )\n})\n         \n    \n\n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation ADVICE_Times series \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n     PlotHeight_adv <- reactive({\n       \n       nids <- length(input$indicatorA)\n       \n       return(300*nids)})\n     \n         # print('caracola08')     \n    observe ({\n      dataA<-reactive({\n        req(input$stockA)\n        adv[adv$year>=input$rangeA[1]         & adv$year<=input$rangeA[2] & adv$stock%in%input$stockA\n          & adv$indicator%in%input$indicatorA & adv$scenario%in%input$scenarioA,]})\n      \n      \n      plotAdvice <- function(){\n        p <- ggplotA <-ggplot(dataA(), aes(x=as.numeric(year), y=q50, color=scenario))+\n              geom_line(lwd=1)+\n              ylab(\"\")+ xlab(\"Year\")+\n              theme(strip.text=element_text(size=16),\n                    legend.title=element_text(size=14),\n                    axis.title=element_text(size=14))\n        \n        if (input$fitCIA == TRUE){\n          p <- p +  geom_ribbon(aes(x=as.numeric(year), ymin=q05, ymax=q95,fill = scenario), alpha=0.3)\n        }\n        if(input$fitA==TRUE){\n          p <- p + facet_wrap(indicator~stock, scales=\"free_y\",ncol=length(input$stockA))\n        }\n        else{\n          p <- p + facet_grid(indicator~stock)\n        }\n        return(p)\n        }\n      \n      \n      output$plotA <- renderPlot({\n        print(plotAdvice())\n      }, height = PlotHeight_adv)\n      \n      \n      # Code to download the plot\n      getAW <- function(){\n        return(input$fileWA)\n      }\n      \n      getAH <- function(){\n        return(input$fileHA)\n      }\n      \n      getAS <- function(){\n        return(input$fileScA)\n      }\n      \n      # Download the plot\n      output$downA <- downloadHandler(\n        filename =  function() {\n          paste(input$filenmA, input$fileTypeA, sep=\".\")\n        },\n        # content is a function with argument file. content writes the plot to the device\n        content = function(file) {\n          ggsave(file, plotAdvice(), width = getAW(), height = getAH(), units = 'cm', scale = getAS())\n        } \n      )\n        \n      \n    })# end of the observe advice\n    \n\n  \n#-----------------------------------------------------------------------------------------------------------------------  \n# PAGE_simulation Summary_polar plots \n#-----------------------------------------------------------------------------------------------------------------------  \n  \n    PlotHeight_sum <- reactive({\n      \n      nids <- length(input$scenarioP)\n      \n      return(300*nids)})\n    \n    # print('caracola09')   \n    #reactive: ssb and f\n    st1 <- reactive({bio[bio$scenario %in% input$scenarioP & (bio$indicator==\"ssb\" | bio$indicator==\"f\") & bio$year==input$yearP, c(\"stock\",\"year\",\"indicator\", \"scenario\", \"q50\")]})\n    st2 <- reactive({bio[bio$scenario %in% input$scenarioP & (bio$indicator==\"ssb\" | bio$indicator==\"f\") & (bio$year>=input$rangeP[1] & bio$year<=input$rangeP[2]), c(\"stock\",\"year\",\"indicator\", \"scenario\", \"q50\")]})\n     \n    #reactive: profits and capacity\n    fl1 <- reactive({flt[flt$scenario %in% input$scenarioP & (flt$indicator==\"grossSurplus\" | flt$indicator==\"capacity\") & flt$year==input$yearP, c(\"fleet\",\"year\",\"indicator\", \"scenario\", \"q50\")]})\n    fl2 <- reactive({flt[flt$scenario %in% input$scenarioP & (flt$indicator==\"grossSurplus\" | flt$indicator==\"capacity\") & (flt$year>=input$rangeP[1] & flt$year<=input$rangeP[2]), c(\"fleet\",\"year\",\"indicator\", \"scenario\", \"q50\")]})\n    \n    \n    plotPolar <- function(){\n      # New data entry\n      dat.stpolar <- NULL\n      dat.flpolar <- NULL\n      \n      st3 <- aggregate(q50 ~ stock + indicator + scenario, data=st2(), FUN=mean)\n      fl3 <- aggregate(q50 ~ fleet + indicator + scenario, data=fl2(), FUN=mean)\n\n      # cuadrante superior: 2 biological indicators by stock:\n      st <- merge(st1(), st3, by=c(\"indicator\",\"stock\", \"scenario\"))\n      st$ratio <- st$q50.x/st$q50.y\n      st.dat <- st\n      st.dat$stock <- paste(\"stock.\",st.dat$stock,sep=\"\")\n      \n      # cuadrante inferior: 2 economical indicators\n      fl <- merge(fl1(), fl3, by=c(\"indicator\",\"fleet\", \"scenario\"), all.x=TRUE)\n      fl$ratio <- fl$q50.x/fl$q50.y\n      fl.dat <- fl\n      fl.dat$fleet <- paste(\"fleet.\",fl.dat$fleet,sep=\"\")\n      \n      # number of stocks and fleets\n      nst <- length(unique(st.dat$stock)) # number of stocks\n      nfl <- length(unique(fl.dat$fleet))\n      \n      w <- scm(nst, nfl)\n      wst <- w/nst\n      wfl <- w/nfl\n      \n      # Index to plot them\n      for(sc in input$scenarioP){\n        st.dat[st.dat$scenario == sc, 'ind'] <- seq(0, wst*(length(st.dat[st.dat$scenario == sc, 'ratio'])-1), by=wst) + wst/2 \n        fl.dat[fl.dat$scenario == sc, 'ind'] <- wst*length(st.dat[st.dat$scenario == sc, 'ratio']) + seq(0, wfl*(length(fl.dat[fl.dat$scenario == sc, 'ratio'])-1), by=wfl) + wfl/2\n      }\n      \n      # save into a general case\n      dat.stpolar <- rbind(dat.stpolar, st.dat)\n      dat.flpolar <- rbind(dat.flpolar, fl.dat)\n            \n      # Palettes for fleet and stock (alphabetic order 1:fleet and 2:stock)\n      # # save into a general case\n      # dat.stpolar <- rbind(dat.stpolar, st.dat)\n      # dat.flpolar <- rbind(dat.flpolar, fl.dat)\n      \n      # Palettes for fleet and stock (alphabetic order 1:fleet and 2:stock)\n      # Add more tones to this palette :\n      palfl <- RColorBrewer::brewer.pal(9 , \"Pastel1\") \n      palst <- RColorBrewer::brewer.pal(9, \"Set1\") \n      \n      palfl <- colorRampPalette(palfl)(nfl)\n      palst <- colorRampPalette(palst)(nst)\n      \n      pal <- c(palfl, palst) # it will sort the categories in alphabetic order\n\n      ymax <- max(c(dat.stpolar$ratio, dat.flpolar$ratio))*(1+sqrt(5))/2\n  \n      # The number of \n      #    # print('caracola22')    \n      # Polar plot (ggplot)\n      p <- ggplot(dat.stpolar, aes(x=ind, y=ratio))+\n        geom_bar(data=dat.stpolar, aes(fill=stock), stat=\"identity\", position=\"dodge\", width=wst)+\n        geom_bar(data=dat.flpolar, aes(x=ind, y=ratio, fill=fleet), stat=\"identity\", position=\"dodge\", width=wfl)+\n        scale_fill_manual(values = pal)+\n        theme_bw()+\n        facet_wrap(scenario~., ncol = 1)+\n        coord_polar(start=-pi/2)+\n        theme(axis.ticks.x = element_blank(),\n              axis.text.x = element_blank(),\n              axis.title.x = element_blank(),\n              axis.line.x = element_blank(),\n              text=element_text(size=16),\n              title=element_text(size=16,face=\"bold\"),\n              strip.text=element_text(size=16))+\n        geom_hline(aes(yintercept=1))+\n        geom_vline(aes(xintercept=0), lwd=1)+\n        geom_vline(aes(xintercept=wst*nst), lwd=1)+\n        geom_vline(aes(xintercept=wst*nst+wst*nst), lwd=1)+\n        geom_vline(aes(xintercept=wst*nst+wst*nst+wfl*nfl), lwd=1)+\n        xlim(c(0,4*w))+\n        annotate(geom=\"text\",x=w/2, y=ymax, label=c(\"SSB\"), size=6)+\n        annotate(geom=\"text\",x=w*3/2, y=ymax, label=c(\"F\"), size=6)+\n        annotate(geom=\"text\",x=w*5/2, y=ymax, label=c(\"Capacity\"), size=6)+\n        annotate(geom=\"text\",x=w*7/2, y=ymax, label=c(\"Gross-Surplus\"), size=6)+\n        labs(fill=\"\")+\n        geom_text(aes(x=1, y = min(dat.flpolar$ratio),label = sum(npv2$q50)))\n      \n      return(p)\n      \n    }\n    \n    output$plotP <- renderPlot({\n        print(plotPolar())\n    }, height = PlotHeight_sum)\n    \n    # Code to download the plot\n    getPW <- function(){\n      return(input$fileWP)\n    }\n    \n    getPH <- function(){\n      return(input$fileHP)\n    }\n    \n    getPS <- function(){\n      return(input$fileScP)\n    }\n    \n    # Download the plot\n    output$downP <- downloadHandler(\n      filename =  function() {\n        paste(input$filenmP, input$fileTypeP, sep=\".\")\n      },\n      # content is a function with argument file. content writes the plot to the device\n      content = function(file) {\n        ggsave(file, plotPolar(), width = getPW(), height = getPH(), units = 'cm', scale = getPS())\n      } \n    )\n    \n} #end of the server",
    "created" : 1542293945833.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1511513035",
    "id" : "22CFD243",
    "lastKnownWriteTime" : 1542294359,
    "last_content_update" : 1542294359188,
    "path" : "C:/Program Files/R/R-3.5.1/library/FLBEIAShiny/flbeiaApp/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}